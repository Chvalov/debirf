#!/bin/bash

# DEBIRF creation script

CMD=$(basename $0)
CMD_PATH=$(dirname $0)

# source debirf.conf
source "$CMD_PATH/debirf.conf"

cd "$DEBIRF_PATH"

msg() {
    echo "  debirf: $@"
}

create_debootstrap() {
    # include initramfs-tools because they'll be handy
    # exclude aptitude
    mkdir -p "$DEBIRF_ROOT"
    /usr/sbin/debootstrap --exclude=aptitude --include=initramfs-tools etch root "$DEBIRF_MIRROR"
    
    > .stage/0
}

install_plugins() {
    export DEBIRF_ROOT
    run-parts --verbose "$DEBIRF_PLUGINS"
    
    > .stage/1
}

install_kernel_apt() {
    chroot root apt-get install "$KERNEL_INST_CAND"
}

install_kernel_dpkg() {
    local KNAME=$(basename "$KERNEL_PACKAGE")
    cp "$KERNEL_PACKAGE" "root/root/$KNAME"
    chroot root dpkg --install "root/$KNAME"
    rm "root/root/$KNAME"
}

install_kernel() {
    # kernel install settings
    cat >root/etc/kernel-img.conf <<EOF
# debirf: default kernel-img options:
do_symlinks = yes
do_bootloader = no
do_initrd = yes
EOF

    local KERNEL_INST_CAND="$KERNEL_APT_DEFAULT"
    local KERNEL_INSTALLED=$(COLUMNS=500 chroot root dpkg -l | grep linux-image | tr -s "[:blank:]" "|" | cut -d '|' -f 2)

    # set $KERNEL_PACKAGE to the path to a kernel .deb:
    if [ "$KERNEL_PACKAGE" ]; then
	KERNEL_INST_CAND=$(dpkg -I "$KERNEL_PACKAGE" | grep 'Package:' | cut -d ' ' -f 3)
    fi

    if [ "$KERNEL_INST_CAND" != "$KERNEL_INSTALLED" ] ; then
	chroot root apt-get remove "$KERNEL_INSTALLED"
	if [ "$KERNEL_PACKAGE" ] ; then
	    install_kernel_dpkg
	else
	    install_kernel_apt
	fi
    fi
    
    # extract kernel, debian stock initrd
    mkdir -p extras/boot
    KERNEL=$(ls -1 root/boot/ | grep 'vmlinuz')
    INITRD=$(ls -1 root/boot/ | grep 'initrd.img')
    [ -f root/boot/"$KERNEL" ] && mv root/boot/"$KERNEL" extras/boot/
    [ -f root/boot/"$INITRD" ] && mv root/boot/"$INITRD" extras/boot/
    [ -L root/vmlinuz ] && rm root/vmlinuz
    [ -L root/initrd.img ] && rm root/initrd.img
    
    > .stage/2
}

### stupid simple method
create_initrd_stupid_simple() {
    #ln sbin/init to /init
    ln -sf sbin/init root/init
    # create root image
    msg "creating debirf initrd..."
    ( cd root && find * | cpio -H newc --create  | gzip ) > debirf.cgz
    > .stage/4
}

### tweak initrd method
create_initrd_tweak_initrd() {
    cat scripts/debirf <<EOF
mountroot() {
 rootmnt="/"
}
EOF
    cat > bin/run-init <<EOF
#!/bin/sh
if [ "$1" != "/" ] ; then
  exec /usr/lib/klibc/bin/run-init "$@"
else
  MOUNT_POINT="$1"
  INIT="$2"
  shift 2
  exec "$INIT" "$@"
fi
EOF
    # create root image
    msg "creating debirf initrd..."
    cp extra/boot/"$INITRD" debirf.cgz
    (cd root && find * | cpio -H newc --create  | gzip ) >> debirf.cgz
    > .stage/4
}


##### MAIN #####

# create checkpoint directory.  stages:
# 0: debootstrap creation
# 1: plugins
# 2: install kernel and extract kernel/initrd
# 3: prune
# 4: initrd method
mkdir -p .stage

##### create debootstrap root
if [ -f .stage/0 ] ; then
    msg "it looks like a root already exists at $DEBIRF_PATH/root."
    read -p "write over? [y|N]: " -n 1 OK ; [ -z $OK ] || echo
    if [ "${OK/y/Y}" = 'Y' ] ; then
	msg "installing new root..."
	create_debootstrap
    fi
else
    msg "installing root..."
    create_debootstrap
fi

# mount sys, proc
mount -t proc proc root/proc
mount -t sysfs sys root/sys

# update apt
chroot root apt-get update

##### install plugins
msg "installing plugins..."
install_plugins

##### install kernel
if [ "$KERNEL_PACKAGE" ] ; then
    read -p "install kernel $KERNEL_PACKAGE? [Y|n]: " -n 1 OK ; [ -z $OK ] || echo
    rm -f "root/root/$KNAME"
else
    read -p "install kernel $KERNEL_APT_DEFAULT? [Y|n]: " -n 1 OK ; [ -z $OK ] || echo
fi
if [ -z "$OK" -o "${OK/y/Y}" = 'Y' ] ; then
    msg "installing kernel..."
    install_kernel
else
    msg "WARNING: things will not work properly without the proper kernel modules installed."
fi

##### prune
msg "pruning..."

# clean apt
chroot root apt-get clean
rm root/var/cache/apt/*.bin
rm -rf root/var/lib/apt/lists/*
mkdir root/var/lib/apt/lists/partial

# remove/backup locales:
mkdir -p extras/usr/share/locale
(cd root && find usr/share/locale -maxdepth 1 -mindepth 1 -type d ! -iname 'en*' -exec mv '{}' '../extras/{}' \; )

# umount sys,proc
umount root/proc
umount root/sys

# clear mtab
> root/etc/mtab
# add proc to fstab
echo proc /proc proc defaults 0 0 >> root/etc/fstab
    
> .stage/3

create_initrd_${DEBIRF_METHOD}

# final output
if [ "$KERNEL" ] ; then
    ln -sf  extras/boot/"$KERNEL" vmlinuz
    msg "kernel: $DEBIRF_PATH/vmlinuz"
fi
msg "initrd: $DEBIRF_PATH/debirf.cgz"
