#!/bin/bash

DEBIRF_PATH="/srv/debirf"
PLUGINS="~/cmrg/trunk/debirf/plugins"
METHOD=0
#http_proxy=http://proxy.lair.fifthhorseman.net:3128/

cd "$DEBIRF_PATH"

alert() {
# send the alerts to stderr:
    printf "$@" >&2
}

# create checkpoint directory.  stages:
# 0: debootstrap creation
# 1: plugins
# 2: install kernel and extract kernel/initrd
# 3: prune
# 4: initrd method
mkdir -p .stage

##### create debootstrap root
# include initramfs-tools because they'll be handy
# exclude aptitude
GET_ROOT='Y'
if [ -f .stage/0 ] ; then
    echo "a debootrap already seems to be in place at $DEBIRF_PATH/root."
    read -p "write over? [Y|n]: " -n 1 OK ; [ -z $OK ] || echo
    if [ "${OK/n/N}" = 'N' ] ; then
	GET_ROOT='N'
    fi
fi
if [ "$GET_ROOT" = 'Y' ] ; then
    mkdir -p root
    /usr/sbin/debootstrap --exclude=aptitude --include=initramfs-tools etch root http://ftp.debian.org/debian
fi

> .stage/0

##### plugins
# other potential plugins:
# change root/etc/motd.tail
# change udev/*persistent-net*
# fix root's .bashrc to include $? in the command prompt.

# run plugin scripts
run-parts --verbose "$PLUGINS"

> .stage/1

# mount sys, proc
mount -t proc proc root/proc
mount -t sysfs sys root/sys

##### install kernel
# kernel install settings
cat >root/etc/kernel-img.conf <<EOF
# debirf: default kernel-img options:
do_symlinks = yes
do_bootloader = no
do_initrd = yes
EOF

# set $KERNEL_PACKAGE to the path to a kernel .deb if you have one
# lying around:
if [ "$KERNEL_PACKAGE" ]; then
    KNAME=$(basename "$KERNEL_PACKAGE")
    cp "$KERNEL_PACKAGE" "root/root/$KNAME"
    chroot root dpkg --install "root/$KNAME"
else
    chroot root apt-get update
    chroot root apt-get install linux-image-2.6-486
fi

# extract kernel, debian stock initrd
mkdir -p extras/boot
KERNEL=$(ls -1 root/boot/ | grep 'vmlinuz')
INITRD=$(ls -1 root/boot/ | grep 'initrd.img')
[ -f root/boot/"$KERNEL" ] && mv root/boot/"$KERNEL" extras/boot/
[ -f root/boot/"$INITRD" ] && mv root/boot/"$INITRD" extras/boot/
rm root/{vmlinuz,initrd.img}

> .stage/2

##### prune
# clean apt
chroot root apt-get clean
rm root/var/cache/apt/*.bin
rm -rf root/var/lib/apt/lists/*
mkdir root/var/lib/apt/lists/partial

# remove/backup locales:
mkdir -p extras/usr/share/locale
(cd root && find usr/share/locale -maxdepth 1 -mindepth 1 -type d ! -iname 'en*' -exec mv '{}' '../extras/{}' \; )

# umount sys,proc
umount root/proc
umount root/sys

# clear mtab
> root/etc/mtab
# add proc to fstab
echo proc /proc proc defaults 0 0 >> root/etc/fstab
    
> .stage/3

##### initrd method
### stupid simple method
if [ "$METHOD" = 0 ] ; then
    #ln sbin/init to /init
#    ln -s sbin/init root/init
    # create root image
    echo "creating debirf initrd..."
    ( cd root && find * | cpio -H newc --create  | gzip ) > debirf.cgz
fi

### tweak initrd method
if [ "$METHOD" = 1 ] ; then
    cat scripts/debirf <<EOF
mountroot() {
 rootmnt="/"
}
EOF
    cat > bin/run-init <<EOF
#!/bin/sh
if [ "$1" != "/" ] ; then
  exec /usr/lib/klibc/bin/run-init "$@"
else
  MOUNT_POINT="$1"
  INIT="$2"
  shift 2
  exec "$INIT" "$@"
fi
EOF
    # create root image
    echo "creating debirf initrd..."
    cp extra/boot/"$INITRD" debirf.cgz
    (cd root && find * | cpio -H newc --create  | gzip ) >> debirf.cgz
fi

> .stage/4

cp extras/boot/"$KERNEL" .
echo "created the following debirf kernel and initramfs:"
echo "$DEBIRF_PATH/$KERNEL"
echo "$DEBIRF_PATH/debirf.cgz"
