#!/bin/bash -e

# make-debirf: script to build debirf system (must be root).
#
# The debirf scripts were written by
# Jameson Rollins <jrollins@fifthhorseman.net>
# and
# Daniel Kahn Gillmor <dkg-debian.org@fifthhorseman.net>.
#
# They are Copyright 2007, and are all released under the GPL, version 2
# or later.

###############################################################
### VARIABLES

CMD=$(basename $0)

DEBIRF_COMMON=${DEBIRF_COMMON:-"/usr/share/debirf/common"}
source "$DEBIRF_COMMON"

###############################################################
### FUNCTIONS

usage() {
    cat <<EOF
Usage: $CMD profile kernel-image.deb
       $CMD kernel-image.deb
EOF
}

failure() {
    echo "$1" >&2
    exit ${2:-'1'}
}

create_debootstrap() {
    msg "creating debirf root..."
    # include initramfs-tools because they'll be handy
    # exclude aptitude
    mkdir -p "$DEBIRF_ROOT"
    #/usr/sbin/debootstrap --exclude=aptitude "$DEBIRF_DISTRO" "$DEBIRF_ROOT" "$DEBIRF_MIRROR"
    fakeroot -s "$DEBIRF_FAKECHROOT_STATE" fakechroot debootstrap --variant=fakechroot "$DEBIRF_DISTRO" "$DEBIRF_ROOT" "$DEBIRF_MIRROR"
}

run_plugins() {
    # export all the DEBIRF_* environment variables:
    for var in ${!DEBIRF_*}; do
	export $var
    done
    #run-parts --verbose "$DEBIRF_PLUGINS"
    fakeroot -i "$DEBIRF_FAKECHROOT_STATE" -s "$DEBIRF_FAKECHROOT_STATE" run-parts --verbose "$DEBIRF_PLUGINS"
}

## create_initrd functions take the name of the targeted initrd as
## their first argument.
# stupid simple method
create_initrd_stupid_simple() {
    #ln sbin/init to /init
    ln -sf /sbin/init "$DEBIRF_ROOT/init"
    
    # create root image
    msg "creating debirf initrd..."
    ( cd "$DEBIRF_ROOT" && find * | cpio -H newc --create  | gzip ) > "$1"
}

# tweak initrd method: untested, probably doesn't work right yet.  soon!
create_initrd_tweak_initrd() {
    cat "$DEBIRF_ROOT/scripts/debirf" <<EOF
mountroot() {
 rootmnt="/"
}
EOF
    cat > "$DEBIRF_ROOT/bin/run-init" <<EOF
#!/bin/sh
if [ "$1" != "/" ] ; then
  exec /usr/lib/klibc/bin/run-init "$@"
else
  MOUNT_POINT="$1"
  INIT="$2"
  shift 2
  exec "$INIT" "$@"
fi
EOF
    # create root image
    msg "creating debirf initrd..."
    cp initrd.img* "$1"
    ( cd "$DEBIRF_ROOT" && find * | cpio -H newc --create  | gzip ) >> "$1"
}

# unionfs method: also untested and probably not working.
create_initrd_unionfs() {
    #ln sbin/init to /init
    ln -sf /sbin/init "$DEBIRF_ROOT/init"
    
    # add unionfs kernel module and init script
    debirf_exec apt-get update
    debirf_exec apt-get install unionfs-modules-"$KERNAVAIL" unionfs-tools

    cat >"$DEBIRF_ROOT/etc/init.d/root-unionfs" <<EOF
#!/bin/bash

mount -t tmpfs tmpfs /tmp
mount -t unionfs dirs=/=ro:/tmp=rw unionfs /
EOF

    ln -sf ../init.d/root-unionfs /etc/rcS.d/S00root-unionfs

    # create root image
    msg "creating debirf initrd..."
    ( cd "$DEBIRF_ROOT" && find * | cpio -H newc --create  | gzip ) > "$1"
}

# mount sys, proc
mount_proc-sys() {
    msg "mounting proc..."
    mount -t proc proc "$DEBIRF_ROOT/proc"
    msg "mounting sys..."
    mount -t sysfs sys "$DEBIRF_ROOT/sys"
}

# umount sys, proc
umount_proc-sys() {
    [ "$DEBIRF_ROOT" ] || exit
    if mount | grep -q "$DEBIRF_ROOT/proc" ; then
	msg "umounting proc..."
	umount "$DEBIRF_ROOT/proc" || failure "Can not umount proc."
    fi
    if mount | grep -q "$DEBIRF_ROOT/sys" ; then
	msg "umounting sys..."
	umount "$DEBIRF_ROOT/sys" || failure "Can not umount sys."
    fi
}

###############################################################
### MAIN

#trap umount_proc-sys EXIT

if [ "$1" = '-h' -o "$1" = '--help' ] ; then
    usage
    exit 0
fi

case $# in
    1)
	DEBIRF_KERNEL_PACKAGE="$1"
	echo "Profile not specified.  Using default profile '$DEBIRF_PROFILE_DEFAULT'."
	DEBIRF_PROFILE="$DEBIRF_PROFILE_DEFAULT"
	;;
    2)
	DEBIRF_PROFILE="$1"
	DEBIRF_KERNEL_PACKAGE="$2"
	;;
    *)
	echo "Improper number of input arguments."
	usage
	exit 1
	;;
esac

# check specified kernel package exists
if [ ! -f "$DEBIRF_KERNEL_PACKAGE" ] ; then
    failure "Specified kernel package '$DEBIRF_KERNEL_PACKAGE' not found."
fi

# source debirf.conf default
source /usr/share/debirf/debirf.conf.defaults
# source system debirf.conf
if [ -f /etc/debirf/debirf.conf ] ; then
    source /etc/debirf/debirf.conf
fi

# check for debirf profile
if [ ! -d "$DEBIRF_PROFILE" ] ; then
    if [ -d "$DEBIRF_PROFILED/$DEBIRF_PROFILE" ] ; then
	DEBIRF_PROFILE="$DEBIRF_PROFILED/$DEBIRF_PROFILE"
    else
	echo "Profile '$DEBIRF_PROFILE' not found."
	read -p "Continue with defaults? [y|N]: " OK; OK=${OK:-N}
	if [ "${OK/y/Y}" != 'Y' ] ; then
	    failure "Aborting."
	fi
    fi
fi

DEBIRF_CONF="$DEBIRF_PROFILE/debirf.conf"
DEBIRF_PLUGINS="$DEBIRF_PROFILE/plugins"

# source profile debirf.conf
if [ -f "$DEBIRF_CONF" ] ; then
    source "$DEBIRF_CONF"
fi
  
# check plugins
if [ ! -d "$DEBIRF_PLUGINS" -o $(ls "$DEBIRF_PLUGINS" -1 | wc -l) = 0 ] ; then
    echo "Plugin directory '$DEBIRF_PLUGINS' is empty or does not exist."
    read -p "Continue without plugins? [Y|n]: " OK; OK=${OK:-Y}
    if [ "${OK/y/Y}" != 'Y' ] ; then
	failure "Aborting."
    fi
fi

# check buildd
if [ -z "$DEBIRF_BUILDD" ] ; then
    failure "DEBIRF_BUILDD is not set."
fi

# check debirf root
if [ -z "$DEBIRF_ROOT" ] ; then
    failure "DEBIRF_ROOT is not set."
fi

# set fakechroot save file
DEBIRF_FAKECHROOT_STATE="$DEBIRF_BUILDD/.fakechroot-$DEBIRF_LABEL.save"

# check variables
echo "Debirf variables:"
for var in ${!DEBIRF_*}; do
    if [ $var ] ; then
	export $var
    else
	failure "Variable '$var' not properly set."
    fi
done
env | /bin/grep "^DEBIRF_"
read -p "enter to continue: " OK

# create debootstrap root
if [ -d "$DEBIRF_ROOT" ] ; then
    echo "Directory $DEBIRF_ROOT already exists."
    echo "Select one of the following:"
    select foo in 'rewrite' 'overwrite' 'skip' 'exit' ; do
	case "$foo" in
	    'rewrite')
		msg "clearing old debirf root..."
		rm -rf "$DEBIRF_ROOT"
		create_debootstrap
		;;
	    'overwrite')
		create_debootstrap
		;;
	    'skip')
		;;
	    *)
		failure "aborting."
		;;
	esac
	break
    done
else
    create_debootstrap
fi

setup_debirf_info

if [ "$DEBIRF_PLUGINS" ] ; then
    #mount_proc-sys
    
    # run plugins
    msg "executing plugins..."
    run_plugins
    msg "plugins complete."

    #umount_proc-sys
fi

# clear mtab
> "$DEBIRF_ROOT/etc/mtab"
# add proc to fstab
if ! awk '{ print $2 }' < "$DEBIRF_ROOT/etc/fstab" | grep -q '^/proc' ; then
    echo proc /proc proc defaults 0 0 >> "$DEBIRF_ROOT/etc/fstab"
fi

KERNAVAIL=$(ls -1 "$DEBIRF_ROOT/lib/modules" | head -n1)
DEBIRF_INITRD="${DEBIRF_LABEL}_${DEBIRF_DISTRO}_${KERNAVAIL}.cgz"
create_initrd_${DEBIRF_METHOD} "$DEBIRF_BUILDD/$DEBIRF_INITRD"

# final output
DEBIRF_KERNEL=$(ls "$DEBIRF_BUILDD" | grep "vmlinu" | grep "$KERNAVAIL$")
msg "debirf initrd created."
if [ "$DEBIRF_BUILDD/$DEBIRF_KERNEL" ] ; then
    msg "kernel: $DEBIRF_BUILDD/$DEBIRF_KERNEL"
fi
msg "initrd: $DEBIRF_BUILDD/$DEBIRF_INITRD"
